from typing import Optional, Iterable


class Empty: ...
class NOT_PROVIDED: ...

class Field:
    def __init__(
            self,
            verbose_name: Optional[str]=None,
            name: Optional[str]=None,
            primary_key: bool=False,
            max_length: Optional[int]=None,
            unique: bool=False,
            blank: bool=False,
            null: bool=False,
            db_index: bool=False,
            rel=None,
            default=NOT_PROVIDED,
            editable: bool=True,
            serialize: bool=True,
            unique_for_date=None,
            unique_for_month=None,
            unique_for_year=None,
            choices=None,
            help_text: str='',
            db_column=None,
            db_tablespace=None,
            auto_created: bool=False,
            validators: Iterable=(),
            error_messages=None
    ) -> None: ...

class AutoField(Field): ...
class BigAutoField(AutoField): ...
class BooleanField(Field): ...
class CharField(Field): ...
class CommaSeparatedIntegerField(CharField): ...
class DateTimeCheckMixin(object): ...
class DateField(DateTimeCheckMixin, Field): ...
class DateTimeField(DateField): ...
class DecimalField(Field): ...
class DurationField(Field): ...
class EmailField(CharField): ...
class FilePathField(Field): ...
class FloatField(Field): ...
class IntegerField(Field): ...
class BigIntegerField(IntegerField): ...
class IPAddressField(Field): ...
class GenericIPAddressField(Field): ...
class NullBooleanField(Field): ...
class PositiveIntegerRelDbTypeMixin(object): ...
class PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField): ...
class PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField): ...
class SlugField(CharField): ...
class SmallIntegerField(IntegerField): ...
class TextField(Field): ...
class TimeField(DateTimeCheckMixin, Field): ...
class URLField(CharField): ...
class BinaryField(Field): ...
class UUIDField(Field): ...
